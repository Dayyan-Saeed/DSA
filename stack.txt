#include <iostream>
using namespace std;

#define MAX_SIZE 100 // Define maximum size of the stack

class Stack {
private:
    int top; // index of the top element
    int arr[MAX_SIZE]; // array to store elements
public:
    Stack() { top = -1; } // constructor to initialize top to -1

    bool isEmpty() {
        return (top == -1); // if top is -1, stack is empty
    }

    bool isFull() {
        return (top == MAX_SIZE - 1); // if top is at the last index, stack is full
    }

    void push(int value) {
        if (isFull()) {
            cout << "Stack is full. Cannot push element " << value << endl;
        }
        else {
            arr[++top] = value; // increment top and insert the element at that index
        }
    }

    int pop() {
        if (isEmpty()) {
            cout << "Stack is empty. Cannot pop element." << endl;
            return -1; // return -1 if stack is empty
        }
        else {
            return arr[top--]; // decrement top and return the element at that index
        }
    }

    int peek() {
        if (isEmpty()) {
            cout << "Stack is empty. Cannot peek element." << endl;
            return -1; // return -1 if stack is empty
        }
        else {
            return arr[top]; // return the element at the top index without removing it
        }
    }
};

int main() {
    Stack s;
    cout << "Is the stack empty? " << s.isEmpty() << endl;
    s.push(10);
    s.push(20);
    s.push(30);
    cout << "Is the stack full? " << s.isFull() << endl;
    cout << "Top element: " << s.peek() << endl;
    cout << "Popped element: " << s.pop() << endl;
    cout << "Popped element: " << s.pop() << endl;
    cout << "Is the stack empty? " << s.isEmpty() << endl;
    cout << "Popped element: " << s.pop() << endl;
    cout << "Is the stack empty? " << s.isEmpty() << endl;
    return 0;
}


#include <iostream>

// Node structure for the linked list
struct Node {
    int data;
    Node* next;
};

// Stack implementation using linked list
class Stack {
private:
    Node* top;

public:
    Stack() : top(nullptr) {}

    // Push an element onto the stack
    void push(int value) {
        Node* newNode = new Node;
        newNode->data = value;
        newNode->next = top;
        top = newNode;
    }

    // Pop an element from the stack
    void pop() {
        if (isEmpty()) {
            std::cout << "Stack underflow." << std::endl;
            return;
        }

        Node* temp = top;
        top = top->next;
        delete temp;
    }

    // Get the top element of the stack
    int peek() {
        if (isEmpty()) {
            std::cout << "Stack is empty." << std::endl;
            return -1;
        }

        return top->data;
    }

    // Check if the stack is empty
    bool isEmpty() {
        return top == nullptr;
    }
};

int main() {
    Stack stack;

    // Pushing elements onto the stack
    stack.push(10);
    stack.push(20);
    stack.push(30);
    stack.push(40);

    // Printing the top element
    std::cout << "Top element: " << stack.peek() << std::endl;

    // Popping elements from the stack
    stack.pop();
    stack.pop();

    // Printing the top element after popping
    std::cout << "Top element: " << stack.peek() << std::endl;

    // Checking if the stack is empty
    std::cout << "Is the stack empty? " << (stack.isEmpty() ? "Yes" : "No") << std::endl;

    return 0;
}

